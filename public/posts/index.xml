<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on maxwell60701 少寒风的Blog</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on maxwell60701 少寒风的Blog</description>
    <generator>Hugo -- 0.128.2</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 10 Jul 2024 14:53:30 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Job</title>
      <link>http://localhost:1313/posts/job/</link>
      <pubDate>Wed, 10 Jul 2024 14:53:30 +0800</pubDate>
      <guid>http://localhost:1313/posts/job/</guid>
      <description>关于上家单位 </description>
    </item>
    <item>
      <title>Docker</title>
      <link>http://localhost:1313/posts/docker/</link>
      <pubDate>Wed, 10 Jul 2024 11:27:08 +0800</pubDate>
      <guid>http://localhost:1313/posts/docker/</guid>
      <description>Docker 心得 我对docker要比k8s熟的多,最近正好空，那就摸摸鱼吧
Docker，英文翻译为码头工人，它的logo是一头鲸鱼搭载着好几个集装箱，从这些就能看出它的含义，它是方便工程师更快捷地打包和部署应用的 安装 windows:docker desktop linux:linux安装
image 在 Docker 中，&amp;ldquo;image&amp;rdquo; 是一个不可变的文件系统快照，其中包含应用程序及其所有依赖项。它相当于一个模板，用来创建 Docker 容器
可以这么说，你应用程序的发布包就是一个镜像
构建镜像 构建镜像需要Dockerfile,示例
# 基础镜像，用于构建 FROM mcr.microsoft.com/dotnet/sdk:7.0 AS build-env # 设置工作目录 WORKDIR /app # 复制 .csproj 文件并恢复依赖项 COPY *.csproj ./ RUN dotnet restore # 复制项目文件 COPY . ./ # 编译项目 RUN dotnet publish -c Release -o out # 基础镜像，用于运行 FROM mcr.microsoft.com/dotnet/aspnet:7.0 # 设置工作目录 WORKDIR /app # 复制编译好的文件到工作目录 COPY --from=build-env /app/out . # 设置容器启动时执行的命令 ENTRYPOINT [&amp;#34;dotnet&amp;#34;, &amp;#34;my-dotnet-app.</description>
    </item>
    <item>
      <title>K8s</title>
      <link>http://localhost:1313/posts/k8s/</link>
      <pubDate>Wed, 10 Jul 2024 10:56:25 +0800</pubDate>
      <guid>http://localhost:1313/posts/k8s/</guid>
      <description>K8s部署 最近公司上了k8s, 我只学了点皮毛,如能学好如虎添翼
前期准备 个人认为，学习K8S前必须掌握docker相关知识，否则学起来很困难
linux上安装k8s 教程
简要结构图 ingress 在Kubernetes中，Ingress 是一个API对象，用于管理对集群内服务的外部访问，通常是 HTTP 和 HTTPS。Ingress 可以提供负载均衡、SSL 终止和基于名称的虚拟主机等功能
apiVersion: networking.k8s.io/v1 kind: Ingress metadata: name: example-ingress spec: rules: - host: example.com http: paths: - path: /app1 pathType: Prefix backend: service: name: app1-service port: number: 80 - path: /app2 pathType: Prefix backend: service: name: app2-service port: number: 80 tls: - hosts: - example.com secretName: example-tls service 在Kubernetes中，Service 是一种用于定义逻辑集合的Pod及其访问策略的API对象。Service 提供了一种抽象，允许你将一组Pod作为一个单一的服务进行访问，而不需要知道这些Pod的具体位置或数量。Service 可以实现负载均衡、服务发现和故障转移等功能
apiVersion: v1 kind: Service metadata: name: my-service spec: selector: app: MyApp ports: - protocol: TCP port: 80 targetPort: 9376 pod 在Kubernetes中，Pod 是最小的可部署计算单元。它是运行在集群上的容器或容器组的抽象。Pod 是Kubernetes中管理和调度容器的基本单元。</description>
    </item>
    <item>
      <title>冒险岛V083 docker部署</title>
      <link>http://localhost:1313/posts/maplestorydocker/</link>
      <pubDate>Wed, 10 Jul 2024 09:52:42 +0800</pubDate>
      <guid>http://localhost:1313/posts/maplestorydocker/</guid>
      <description>gitee地址请点击 B站被封，只能转移到外网
点击查看视频教程</description>
    </item>
    <item>
      <title>Stablediffusion</title>
      <link>http://localhost:1313/posts/stablediffusion/</link>
      <pubDate>Wed, 10 Jul 2024 09:35:19 +0800</pubDate>
      <guid>http://localhost:1313/posts/stablediffusion/</guid>
      <description>我自己写了一个nuget包,用以调用stablediffusion的webapi StableDiffusion.AI.Core </description>
    </item>
    <item>
      <title>关于我的哔哩哔哩</title>
      <link>http://localhost:1313/posts/bili/</link>
      <pubDate>Tue, 09 Jul 2024 17:37:06 +0800</pubDate>
      <guid>http://localhost:1313/posts/bili/</guid>
      <description>简介 个人哔哩哔哩账号</description>
    </item>
    <item>
      <title>我的第一个博客</title>
      <link>http://localhost:1313/posts/my-first-post/</link>
      <pubDate>Sun, 14 Jan 2024 07:07:07 +0800</pubDate>
      <guid>http://localhost:1313/posts/my-first-post/</guid>
      <description>简介 今天很开心，这是hugo部署的
Visit the Hugo website!</description>
    </item>
  </channel>
</rss>
